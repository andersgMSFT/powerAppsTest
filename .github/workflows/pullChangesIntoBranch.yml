name: Get latest solution changes

on:
  workflow_dispatch:
    inputs:
      environment:
        type: text
        description: The environment to get latest changes from
        default: QA
      useDev:
        type: boolean 
        description: Search for the dev version of the solution
        default: true
    
env:
  solutionName: BcSampleAppsSolution
  solutionUniqueName: BcSampleAppsSolution

jobs:
  get-changes:
    runs-on: ubuntu-latest
    environment: ${{github.event.inputs.environment}}   
    
    steps:    
      - name: Check if main branch 
        if: ${{ github.ref_name == 'main' }}
        run: echo "Please create a new branch to avoid direct commits to main " + ${{ github.ref_name }};  exit 2;
        
      - name: Assign unique solution name
        if: ${{github.event.inputs.useDev}}
        run: echo "solutionUniqueName=${{env.solutionName}}_dev" >> $GITHUB_ENV 
        
      - name: Show unique solution name
        run: echo echo $solutionUniqueName
      
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: who-am-i action
        uses: microsoft/powerplatform-actions/who-am-i@v0
        with:
          user-name: ${{ secrets.PowerUser }}
          password-secret: ${{ secrets.PowerPassword }}
          environment-url: ${{ secrets.PowerEnv }}

      - name: export-solution action
        uses: microsoft/powerplatform-actions/export-solution@v0
        with:
          user-name: ${{ secrets.PowerUser }}
          password-secret: ${{ secrets.PowerPassword }}
          environment-url: ${{ secrets.PowerEnv }}
          solution-name: ${{ env.solutionUniqueName }} #This is using the unique name so we can specify if dev or normal version
          solution-output-file: ${{ env.solutionName }}.zip

      - name: unpack-solution action
        uses: microsoft/powerplatform-actions/unpack-solution@v0
        with:
          solution-file: ${{ env.solutionName }}.zip
          solution-folder: ${{ env.solutionName }}
          solution-type: 'Unmanaged'
          overwrite-files: true
          process-canvas-apps: true   
      
      - name: Check for git changes
        run: echo "areThereGitChanges=(git status --porcelain)" >> $GITHUB_ENV 
      
      - name: Commit changes (if there are any) 
        if: ${{ env.areThereGitChanges }}
        run: git config user.email "git@workflow.com"; git config user.name "Workflow"; git add ${{ env.solutionName }} ; git commit -m "pull latest solution changes"; git push; 
